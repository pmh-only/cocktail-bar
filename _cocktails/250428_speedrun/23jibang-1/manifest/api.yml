apiVersion: v1
kind: ServiceAccount
metadata:
  name: api
  namespace: skills
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::111122223333:role/my-role
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  api
  namespace: skills
  labels:
    app:  api
spec:
  selector:
    matchLabels:
      app: api
  strategy:
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  api
    spec:
      terminationGracePeriodSeconds: 60
      serviceAccountName: api
      restartPolicy: Always
      nodeSelector:
        dedicated: app
      tolerations:
        - key: dedicated
          value: app
          effect: NoExecute
      # topologySpreadConstraints:
      #   - maxSkew: 1
      #     topologyKey: capacity-spread
      #     whenUnsatisfiable: DoNotSchedule
      #     labelSelector:
      #       matchLabels:
      #         app: api
      containers:
      - name:  api
        image:  648911607072.dkr.ecr.ap-northeast-2.amazonaws.com/api:latest
        lifecycle:
          preStop:
            exec:
              command: ["sleep", "45"]
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        livenessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - |
                curl -f http://localhost:8080/health || exit 1
          initialDelaySeconds: 5
          timeoutSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - |
                curl -f http://localhost:8080/health || exit 1
          initialDelaySeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        # env:
        # - name: DB_HOST
        #   valueFrom:
        #     configMapKeyRef:
        #       name: api
        #       key: DB_HOST
        # - name: DB_PASS
        #   valueFrom:
        #     secretKeyRef:
        #       name: api
        #       key: DB_PASS
        ports:
        - containerPort: 8080
          name:  api
---
# kind: ConfigMap
# apiVersion: v1
# metadata:
#   name: api
#   namespace: skills
# data:
#   key: default
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: api
#   namespace: skills
# type: Opaque
# stringData:
#   DB_PASS: hello
# ---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: skills
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-name: api
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: '2'
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: '2'
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: '2'
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: '5'
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: HTTP
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: /health
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: owner=pmh_only
    service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: >-
      deregistration_delay.timeout_seconds=60,
      target_health_state.unhealthy.connection_termination.enabled=false
    service.beta.kubernetes.io/aws-load-balancer-attributes: >-
      deletion_protection.enabled=true,
      load_balancing.cross_zone.enabled=true,
      zonal_shift.config.enabled=true,
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=jnc-log20250506063353568600000001,
      access_logs.s3.prefix=accesslog
spec:
  type: LoadBalancer
  loadBalancerClass: service.k8s.aws/nlb
  selector:
    app: api
  ports:
  - name: api
    protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler 
metadata:
  name: api
  namespace: skills
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api
  minReplicas: 2
  maxReplicas: 64
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 4
        periodSeconds: 15
      selectPolicy: Max
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 75
---
# apiVersion: projectcalico.org/v3
# kind: NetworkPolicy
# metadata:
#   name: api
#   namespace: skills
# spec:
#   selector: app == 'api'
#   ingress:
#     # Allow traffic from specific container
#     - action: Allow
#       source:
#         selector: app == 'api'
#         namespaceSelector: projectcalico.org/name == 'skills'

#     # Make it controlled by security group and block inner-cluster traffic
#     - action: Allow
#       source:
#         nets: ['0.0.0.0/0']
#         notNets: # Inner-cluster ips
#           - 10.0.10.0/24
#           - 10.0.11.0/24
#           - 10.0.12.0/24
---
# apiVersion: vpcresources.k8s.aws/v1beta1
# kind: SecurityGroupPolicy
# metadata:
#   name: api
#   namespace: skills
# spec:
#   podSelector:
#     matchLabels:
#       app: api
#   securityGroups:
#     groupIds:
#       - sg-0ea3daad2e55a0147
